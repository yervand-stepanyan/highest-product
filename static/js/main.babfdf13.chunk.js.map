{"version":3,"sources":["helpers/filterInput.js","components/Main/Main.style.js","components/Main/Main.js","globals/constants.js","serviceWorker.js","index.js"],"names":["filterInput","text","replace","useStyles","makeStyles","mainContainer","display","alignItems","flexDirection","maxHeight","padding","titleWrapper","marginBottom","textAlign","exampleWrapper","inputContainer","width","buttonWrapper","listWrapper","resultWrapper","Main","classes","useState","inputList","setInputList","result","setResult","value","setValue","handleSubmit","listString","arrayFromString","split","numbersList","map","item","join","every","Number","isInteger","length","sort","a","b","slice","reduce","acc","next","highestProduct","className","Typography","color","variant","TextField","id","fullWidth","label","onChange","e","target","onKeyDown","key","Button","disabled","onClick","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.babfdf13.chunk.js","sourcesContent":["const filterInput = text => {\n  const spacesRemovedText = text.replace(/\\s/g, '');\n  const bracketsRemovedText = spacesRemovedText.replace(/[\\])}[{(]/g, '');\n  const multipleCommasReplacedText = bracketsRemovedText.replace(/[, ]+/g, ',');\n\n  return multipleCommasReplacedText.replace(/^,|,$/g, '');\n};\n\nexport default filterInput;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles({\n  mainContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    maxHeight: '100vh',\n    padding: '10px',\n  },\n  titleWrapper: {\n    marginBottom: '10px',\n    textAlign: 'center',\n  },\n  exampleWrapper: {\n    marginBottom: '20px',\n    textAlign: 'center',\n  },\n  inputContainer: {\n    marginBottom: '20px',\n    width: '60%',\n    '@media only screen and (min-width: 768px)': {\n      width: '40%',\n    },\n  },\n  buttonWrapper: {\n    marginBottom: '20px',\n  },\n  listWrapper: {\n    textAlign: 'center',\n    marginBottom: '20px',\n  },\n  resultWrapper: {\n    textAlign: 'center',\n  },\n});\n","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nimport {\n  BUTTON_LABEL,\n  ERROR_MESSAGE,\n  INPUT_LIST_LABEL,\n  INPUT_PLACEHOLDER,\n  LIST_EXAMPLE_LABEL,\n  RESULT_LABEL,\n  TITLE_TEXT_LABEL,\n} from '../../globals/constants';\nimport filterInput from '../../helpers/filterInput';\nimport { useStyles } from './Main.style';\n\nfunction Main() {\n  const classes = useStyles();\n  const [inputList, setInputList] = useState('');\n  const [result, setResult] = useState('');\n  const [value, setValue] = useState('');\n\n  const handleInputChange = event => {\n    setValue(event.target.value);\n  };\n\n  const highestProduct = listString => {\n    const filteredString = filterInput(listString);\n    const arrayFromString = filteredString.split(',');\n    const numbersList = arrayFromString.map(item => +item);\n    setInputList(`[ ${arrayFromString.join(', ')} ]`);\n\n    const isListValid = numbersList.every(\n      item => typeof item === 'number' && Number.isInteger(item)\n    );\n\n    if (isListValid && numbersList.length > 2) {\n      const sortedList = [...numbersList].sort((a, b) => b - a);\n      const highestThreeNumbers = sortedList.slice(0, 3);\n\n      return highestThreeNumbers.reduce((acc, next) => acc * next, 1);\n    }\n\n    return ERROR_MESSAGE;\n  };\n\n  const handleSubmit = () => {\n    setResult(highestProduct(value));\n\n    setValue('');\n  };\n\n  const handleSubmitOnEnter = event => {\n    if (event.key === 'Enter') {\n      handleSubmit();\n    }\n  };\n\n  return (\n    <div className={classes.mainContainer}>\n      <div className={classes.titleWrapper}>\n        <Typography color=\"textPrimary\" variant=\"h5\">\n          {TITLE_TEXT_LABEL}\n        </Typography>\n      </div>\n      <div className={classes.exampleWrapper}>\n        <Typography color=\"textSecondary\" variant=\"subtitle2\">\n          {LIST_EXAMPLE_LABEL}\n        </Typography>\n      </div>\n      <div className={classes.inputContainer}>\n        <TextField\n          id=\"outlined-basic\"\n          fullWidth\n          label={INPUT_PLACEHOLDER}\n          onChange={e => handleInputChange(e)}\n          onKeyDown={e => handleSubmitOnEnter(e)}\n          value={value}\n          variant=\"outlined\"\n        />\n      </div>\n      <div className={classes.buttonWrapper}>\n        <Button\n          color=\"primary\"\n          disabled={!value}\n          onClick={handleSubmit}\n          size=\"large\"\n          variant=\"contained\"\n        >\n          {BUTTON_LABEL}\n        </Button>\n      </div>\n      {inputList.length ? (\n        <div>\n          <div className={classes.listWrapper}>\n            <Typography color=\"primary\" variant=\"subtitle1\">\n              {INPUT_LIST_LABEL}\n            </Typography>\n            <Typography color=\"primary\" variant=\"subtitle2\">\n              {inputList}\n            </Typography>\n          </div>\n          <div className={classes.resultWrapper}>\n            <Typography color=\"primary\" variant=\"subtitle1\">\n              {RESULT_LABEL}\n            </Typography>\n            <Typography color=\"secondary\" variant=\"h5\">\n              {result}\n            </Typography>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default Main;\n","export const BUTTON_LABEL = 'Submit';\nexport const ERROR_MESSAGE =\n  '* Only numbers, only integers, at least 3 numbers';\nexport const INPUT_LIST_LABEL = 'Your list is:';\nexport const INPUT_PLACEHOLDER = 'Input numbers';\nexport const LIST_EXAMPLE_LABEL = '* e.g. 1, 10, 2, 6, 5, 3';\nexport const RESULT_LABEL = 'Result is:';\nexport const TITLE_TEXT_LABEL =\n  'Input a list of integers separated by \" , \" (comma)';\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './components/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}